pro rheader, fname, mname, PA_disk, Q_disk, xcen, ycen, galaxy_image, bulge_image, $
             disk_image, mask_image, Rs_disk, Re_bulge, S_index, Q_bulge, PA_bulge, sky, status
;
; Reads header information from a fits file generated by galfit.
;
; Input parameters:
;  FNAME: String data file in fits format
;  MNAME: String mask file in fits format
;
; Output parameters:
;  PA_DISK: Position angle of the disk (degrees)
;  Q_DISK: Axis ratio b/a for the disk (dimensionless)
;  XCEN: Galaxy center in x dimension (pixels)
;  YCEN: Galaxy center in y dimension (pixels)
;  GALAXY_IMAGE: Array of data pixel values
;  BULGE_IMAGE: Array of pixel values for the fitted bulge
;  DISK_IMAGE: Array of pixel values for the fitted disk
;  MASK_IMAGE: Array of mask pixel values
;  RS_DISK: Scalelength of the disk (pixels)
;  RE_BULGE: Effective radius of the bulge (pixels)
;  S_INDEX: Sersic index of the bulge (dimensionless)
;  Q_BULGE: Axis ratio b/a for the bulge (dimensionless)
;  PA_BULGE: Position angle of the bulge (degrees)
;  SKY: Sky background level
;  STATUS: 0 for success, -1 for error
;
  status = 0
  
  ; Check that input files exist
  if ~file_test(fname) then begin
    print, "Error: Data file not found: ", fname
    status = -1
    return
  endif
  
  if ~file_test(mname) then begin
    print, "Error: Mask file not found: ", mname
    status = -1
    return
  endif
  
  ; Read the header information first
;  galaxy_image_temp = MRDFITS(fname, 2, Header, /SILENT, status=read_status)
  galaxy_image_temp = MRDFITS(fname, 2, Header, /SILENT)
;  if read_status NE 0 then begin
;    print, "Error reading FITS file: ", fname
;    status = -1
;    return
;  endif
  
  ; Define header parameter indices (easier to maintain)
  h_xcen = 18
  h_ycen = 19
  h_Re_bulge = 21
  h_S_index = 22
  h_Q_bulge = 23
  h_PA_bulge = 24
  h_Rs_disk = 30
  h_Q_disk = 31
  h_PA_disk = 32
  h_sky = 37
  
  ; Extract parameters with error handling
  catch, error_state
  if error_state NE 0 then begin
    print, "Error parsing header values"
    catch, /cancel
    status = -1
    return
  endif
  
  ; Read header values (with consistent format strings)
  reads, Header(h_xcen), FORMAT='(11x,f7.6,35x)', xcen
  reads, Header(h_ycen), FORMAT='(11x,f7.6,35x)', ycen
  reads, Header(h_Re_bulge), FORMAT='(11x,f7.6,35x)', Re_bulge
  reads, Header(h_S_index), FORMAT='(11x,f7.6,35x)', S_index
  reads, Header(h_Q_bulge), FORMAT='(11x,f7.6,35x)', Q_bulge
  reads, Header(h_PA_bulge), FORMAT='(11x,f7.6,35x)', PA_bulge
  reads, Header(h_Rs_disk), FORMAT='(11x,f7.6,35x)', Rs_disk
  reads, Header(h_Q_disk), FORMAT='(11x,f7.6,35x)', Q_disk
  reads, Header(h_PA_disk), FORMAT='(11x,f7.6,35x)', PA_disk
  reads, Header(h_sky), FORMAT='(11x,f7.6,35x)', sky
  catch, /cancel
  
  ; Print extracted values
  print, 'intensity_peak', xcen, ycen
  print, 'scale_length', Rs_disk
  print, 'disk_Q', Q_disk
  print, 'disk_PA', PA_disk
  print, 'eff_rad', Re_bulge
  print, 'Sersic index', S_index
  print, 'bulge_Q', Q_bulge
  print, 'bulge_PA', PA_bulge
  print, 'sky', sky
  
  ; Read image data
;  galaxy_image = MRDFITS(fname, 1, /SILENT, status=read_status)
  galaxy_image = MRDFITS(fname, 1, /SILENT)
;  if read_status NE 0 then status = -1
  
;  bulge_image = MRDFITS(fname, 2, /SILENT, status=read_status)
  bulge_image = MRDFITS(fname, 2, /SILENT)
;  if read_status NE 0 then status = -1
  
;  disk_image = MRDFITS(fname, 3, /SILENT, status=read_status)
  disk_image = MRDFITS(fname, 3, /SILENT)
;  if read_status NE 0 then status = -1
  
;  mask_image = MRDFITS(mname, 0, /SILENT, status=read_status)
  mask_image = MRDFITS(mname, 0, /SILENT)
;  if read_status NE 0 then status = -1
  
  return
end
